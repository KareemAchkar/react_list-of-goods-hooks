{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","visibleGoods","goods","sort","a","b","ALPHABET","localeCompare","LENGTH","length","reverse","console","log","getReorderedGoods","className","type","cn","onClick","current","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA4CE,IAAME,EAAuB,WAMlC,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KA4BMC,EApED,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAGNK,EAAY,YAAOC,GAuBzB,OArBIH,GACFE,EAAaE,MAAK,SAACC,EAAGC,GACpB,OAAQN,GACN,KAAKP,EAASc,SACZ,OAAOF,EAAEG,cAAcF,GACzB,KAAKb,EAASgB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OAEtB,QACE,OAAO,MAKXb,GACFK,EAAaS,UAIfC,QAAQC,IAAIb,EAAUH,GAEfK,EAyCHY,CAAkBpB,EAAiB,CAAEM,WAAUH,eAEnD,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CACE,WAAYjB,IAAaP,EAASc,WAGtCW,QAAS,kBAAMjB,EAAYR,EAASc,WARtC,iCAaA,wBACES,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,WAAYjB,IAAaP,EAASgB,SAGtCS,QAAS,kBAAMjB,EAAYR,EAASgB,SARtC,4BAaA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,YAAapB,IAGjBqB,QAAS,kBAAMpB,GAAc,SAAAqB,GAAO,OAAKA,MAR3C,sBAaEtB,GAAcG,IAAaP,EAASM,OACpC,wBACEiB,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAxDjBjB,EAAYR,EAASM,WACrBD,GAAc,IAoDR,sBAUJ,6BACE,6BACGI,EAAakB,KACZ,SAAAC,GAAI,OACF,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,cC3JrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.52261cc0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  if (sortType) {\n    visibleGoods.sort((a, b) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return a.localeCompare(b);\n        case SortType.LENGTH:\n          return a.length - b.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\ntype Props = {};\n\nexport const App: React.FC<Props> = () => {\n  // state = {\n  //   isReversed: false,\n  //   sortType: SortType.NONE,\n  // };\n\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  // handleAlpha = () => {\n  //   setSortType(\n  //     SortType.ALPHABET,\n  //   );\n  // };\n\n  // handleLength = () => {\n  //   this.setState({\n  //     sortType: SortType.LENGTH,\n  //   });\n  // };\n\n  // handleReverse = () => {\n  //   this.setState((state) => ({\n  //     isReversed: !state.isReversed,\n  //   }));\n  // };\n\n  const resetHandle = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  // render(): React.ReactNode {\n  //   const { isReversed, sortType } = this.state;\n\n  const visibleGoods\n    = getReorderedGoods(goodsFromServer, { sortType, isReversed });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            {\n              'is-light': sortType !== SortType.ALPHABET,\n            },\n          )}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={() => setIsReversed(current => !current)}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortType !== SortType.NONE) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => resetHandle()}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(\n            good => (\n              <li\n                key={good}\n                data-cy=\"Good\"\n              >\n                {good}\n              </li>\n            ),\n          )}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}